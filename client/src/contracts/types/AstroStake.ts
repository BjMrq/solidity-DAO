/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewStake = ContractEventLog<{
  stakerAddress: string;
  stakedAmount: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type UnStake = ContractEventLog<{
  stakerAddress: string;
  stakedAmount: string;
  rewardAmount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface AstroStake extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AstroStake;
  clone(): AstroStake;
  methods: {
    Erc20Token(): NonPayableTransactionObject<string>;

    getSenderCurrentStakeDays(): NonPayableTransactionObject<string>;

    hasEverStakedTracker(arg0: string): NonPayableTransactionObject<boolean>;

    isCurrentlyStakingTracker(
      arg0: string
    ): NonPayableTransactionObject<boolean>;

    lastStakesRegistry(arg0: string): NonPayableTransactionObject<{
      amount: string;
      timestamp: string;
      0: string;
      1: string;
    }>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    stakeInterestRateWithFourDecimals(): NonPayableTransactionObject<string>;

    stakeLockTimeDay(): NonPayableTransactionObject<string>;

    stakeTokens(
      _amountToStakeInWei: number | string | BN
    ): NonPayableTransactionObject<void>;

    stakersAddress(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unStakeTokens(): NonPayableTransactionObject<void>;

    updateInterestRate(
      _newInterestRateWithFourDecimals: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateStakeLockTime(
      _newLockTime: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    NewStake(cb?: Callback<NewStake>): EventEmitter;
    NewStake(options?: EventOptions, cb?: Callback<NewStake>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    UnStake(cb?: Callback<UnStake>): EventEmitter;
    UnStake(options?: EventOptions, cb?: Callback<UnStake>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewStake", cb: Callback<NewStake>): void;
  once(event: "NewStake", options: EventOptions, cb: Callback<NewStake>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "UnStake", cb: Callback<UnStake>): void;
  once(event: "UnStake", options: EventOptions, cb: Callback<UnStake>): void;
}
