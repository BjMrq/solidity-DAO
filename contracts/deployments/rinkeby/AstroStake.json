{
  "address": "0x82c062a9de19d17Fb6c3Ac28e441D9cb296De722",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_erc20Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeInterestRateWithFourDecimalsWithFoursDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeLockTimeDays",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "UnStake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Erc20Token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSenderCurrentStakeDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasEverStakedTracker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCurrentlyStakingTracker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastStakesRegistry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeInterestRateWithFourDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeLockTimeDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToStakeInWei",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unStakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newInterestRateWithFourDecimals",
          "type": "uint256"
        }
      ],
      "name": "updateInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLockTime",
          "type": "uint256"
        }
      ],
      "name": "updateStakeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba437eafff21f0d826142fe382b63069c1732def58982302fc09550f7c84c950",
  "receipt": {
    "to": null,
    "from": "0xb0Ac92789210e8EE8CEF8651303B682887A4c7Ff",
    "contractAddress": "0x82c062a9de19d17Fb6c3Ac28e441D9cb296De722",
    "transactionIndex": 13,
    "gasUsed": "680332",
    "logsBloom": "0x
    "blockHash": "0xbea47e8c0a975dd119870a0826c6738d18c1acae83a6c6247725f91ed3172f03",
    "transactionHash": "0xba437eafff21f0d826142fe382b63069c1732def58982302fc09550f7c84c950",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 10481783,
        "transactionHash": "0xba437eafff21f0d826142fe382b63069c1732def58982302fc09550f7c84c950",
        "address": "0x82c062a9de19d17Fb6c3Ac28e441D9cb296De722",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b0ac92789210e8ee8cef8651303b682887a4c7ff"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xbea47e8c0a975dd119870a0826c6738d18c1acae83a6c6247725f91ed3172f03"
      }
    ],
    "blockNumber": 10481783,
    "cumulativeGasUsed": "1772979",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA7F1Cc209DA766496B61875a8862F65ca120e91e",
    60,
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "ffaed285f28404f0c6eb665abdd4cb89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeInterestRateWithFourDecimalsWithFoursDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeLockTimeDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Erc20Token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSenderCurrentStakeDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasEverStakedTracker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCurrentlyStakingTracker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastStakesRegistry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeInterestRateWithFourDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLockTimeDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToStakeInWei\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterestRateWithFourDecimals\",\"type\":\"uint256\"}],\"name\":\"updateInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockTime\",\"type\":\"uint256\"}],\"name\":\"updateStakeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstroStake.sol\":\"AstroStake\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AstroStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./SimpleStake.sol\\\";\\n\\n\\ncontract AstroStake is SimpleStake {\\n   constructor(\\n     ERC20 _erc20Token, uint256 _stakeInterestRateWithFourDecimalsWithFoursDecimals, uint256 _stakeLockTimeDays\\n     ) SimpleStake(_erc20Token, _stakeInterestRateWithFourDecimalsWithFoursDecimals, _stakeLockTimeDays) {\\n   }\\n}\",\"keccak256\":\"0xa059da4a799675327620fc5eca806796cd91aa5dfdf2b45c56e63afb26bb91ab\",\"license\":\"MIT\"},\"contracts/SimpleStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SimpleStake is Ownable {\\n  ERC20 public Erc20Token;\\n\\n  struct Stake {\\n    uint256 amount;\\n    uint256 timestamp;\\n  }\\n\\n  address[] public stakersAddress;\\n  mapping(address => Stake) public lastStakesRegistry;\\n\\n  mapping(address => bool) public hasEverStakedTracker;\\n  mapping(address => bool) public isCurrentlyStakingTracker;\\n\\n  uint256 public stakeInterestRateWithFourDecimals;\\n  uint256 public stakeLockTimeDay;\\n\\n  event NewStake(\\n    address indexed stakerAddress,\\n    uint256 indexed stakedAmount,\\n    uint256 indexed timestamp\\n  );\\n\\n  event UnStake(\\n    address indexed stakerAddress,\\n    uint256 indexed stakedAmount,\\n    uint256 indexed rewardAmount\\n  );\\n\\n  //Interest rate is calculated with 4 decimals so 1 === 0.0001\\n  constructor(\\n    ERC20 _erc20Token,\\n    uint256 _stakeInterestRateWithFourDecimalsWithFoursDecimals,\\n    uint256 _stakeLockTimeDays\\n  ) {\\n    Erc20Token = _erc20Token;\\n    stakeInterestRateWithFourDecimals = _stakeInterestRateWithFourDecimalsWithFoursDecimals;\\n    stakeLockTimeDay = _stakeLockTimeDays;\\n  }\\n\\n  //SETTINGS\\n  function updateInterestRate(uint256 _newInterestRateWithFourDecimals) external onlyOwner {\\n    stakeInterestRateWithFourDecimals = _newInterestRateWithFourDecimals;\\n  }\\n\\n  function updateStakeLockTime(uint256 _newLockTime) external onlyOwner {\\n    stakeLockTimeDay = _newLockTime;\\n  }\\n\\n  // UTILS\\n  function getNumberOfDaysFromStake(Stake memory stake) internal view returns (uint256) {\\n    return (block.timestamp - stake.timestamp) / (60 * 60 * 24);\\n  }\\n\\n  function getSenderCurrentStakeDays() public view returns (uint256) {\\n    return getNumberOfDaysFromStake(lastStakesRegistry[msg.sender]);\\n  }\\n\\n  // STAKE\\n  function updateNewStakeTracker() private {\\n    isCurrentlyStakingTracker[msg.sender] = true;\\n    hasEverStakedTracker[msg.sender] = true;\\n  }\\n\\n  function processStake(uint256 _stakedAmount) private {\\n    Erc20Token.transferFrom(msg.sender, address(this), _stakedAmount);\\n\\n    uint256 timestamp = block.timestamp;\\n\\n    lastStakesRegistry[msg.sender] = Stake({amount: _stakedAmount, timestamp: timestamp});\\n\\n    emit NewStake(msg.sender, _stakedAmount, timestamp);\\n  }\\n\\n  function stakeTokens(uint256 _amountToStakeInWei) public {\\n    require(_amountToStakeInWei > 0, \\\"staking amount required\\\");\\n    require(!isCurrentlyStakingTracker[msg.sender], \\\"already staking\\\");\\n\\n    processStake(_amountToStakeInWei);\\n\\n    updateNewStakeTracker();\\n  }\\n\\n  // UNSTAKE\\n  function updateUnStakeTracker() private {\\n    isCurrentlyStakingTracker[msg.sender] = false;\\n  }\\n\\n  function processUnStake(Stake memory stakeToUnStake, uint256 _totalStakedDays) private {\\n    uint256 stakingReward = (stakeToUnStake.amount *\\n      stakeInterestRateWithFourDecimals *\\n      _totalStakedDays) / 100000;\\n\\n    Erc20Token.transfer(msg.sender, stakeToUnStake.amount + stakingReward);\\n\\n    emit UnStake(msg.sender, stakeToUnStake.amount, stakingReward);\\n  }\\n\\n  function unStakeTokens() public {\\n    require(isCurrentlyStakingTracker[msg.sender], \\\"not staking\\\");\\n\\n    Stake memory senderStake = lastStakesRegistry[msg.sender];\\n\\n    uint256 totalStakedDays = getSenderCurrentStakeDays();\\n\\n    require(totalStakedDays >= stakeLockTimeDay, \\\"lock time has not expired\\\");\\n\\n    processUnStake(senderStake, totalStakedDays);\\n\\n    updateUnStakeTracker();\\n  }\\n}\\n\",\"keccak256\":\"0xe4323e8dc1e3f58fd2c4cb22f0fa387f52ca17a428b1c70c6ee59abd98851d0d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610aaf380380610aaf83398101604081905261002f916100bb565b82828261003b3361006b565b600180546001600160a01b0319166001600160a01b039490941693909317909255600655600755506100fe915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000606084860312156100d057600080fd5b83516001600160a01b03811681146100e757600080fd5b602085015160409095015190969495509392505050565b6109a28061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637547c7a311610097578063b066d06211610066578063b066d062146101f4578063c3dd76e214610227578063e40c358d1461024a578063f2fde38b1461025357600080fd5b80637547c7a31461018c5780637896bf1d1461019f5780638da5cb5b146101a757806395a1eba1146101b857600080fd5b80632d207929116100d35780632d20792914610156578063715018a61461015e578063751408c514610166578063752a50a61461017957600080fd5b806308262b42146100fa5780632c343a781461010f5780632c5b0df61461012b575b600080fd5b61010d610108366004610846565b610266565b005b61011860065481565b6040519081526020015b60405180910390f35b60015461013e906001600160a01b031681565b6040516001600160a01b039091168152602001610122565b61011861029e565b61010d6102d5565b61013e610174366004610846565b61030b565b61010d610187366004610846565b610335565b61010d61019a366004610846565b610364565b61010d610447565b6000546001600160a01b031661013e565b6101df6101c636600461085f565b6003602052600090815260409020805460019091015482565b60408051928352602083019190915201610122565b61021761020236600461085f565b60056020526000908152604090205460ff1681565b6040519015158152602001610122565b61021761023536600461085f565b60046020526000908152604090205460ff1681565b61011860075481565b61010d61026136600461085f565b610544565b6000546001600160a01b031633146102995760405162461bcd60e51b81526004016102909061088f565b60405180910390fd5b600755565b33600090815260036020908152604080832081518083019092528054825260010154918101919091526102d0906105dc565b905090565b6000546001600160a01b031633146102ff5760405162461bcd60e51b81526004016102909061088f565b6103096000610602565b565b6002818154811061031b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461035f5760405162461bcd60e51b81526004016102909061088f565b600655565b600081116103b45760405162461bcd60e51b815260206004820152601760248201527f7374616b696e6720616d6f756e742072657175697265640000000000000000006044820152606401610290565b3360009081526005602052604090205460ff16156104065760405162461bcd60e51b815260206004820152600f60248201526e616c7265616479207374616b696e6760881b6044820152606401610290565b61040f81610652565b3360009081526005602090815260408083208054600160ff199182168117909255600490935292208054909116909117905550565b50565b3360009081526005602052604090205460ff166104945760405162461bcd60e51b815260206004820152600b60248201526a6e6f74207374616b696e6760a81b6044820152606401610290565b3360009081526003602090815260408083208151808301909252805482526001015491810191909152906104c661029e565b905060075481101561051a5760405162461bcd60e51b815260206004820152601960248201527f6c6f636b2074696d6520686173206e6f742065787069726564000000000000006044820152606401610290565b6105248282610740565b610540336000908152600560205260409020805460ff19169055565b5050565b6000546001600160a01b0316331461056e5760405162461bcd60e51b81526004016102909061088f565b6001600160a01b0381166105d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610290565b61044481610602565b6000620151808260200151426105f291906108da565b6105fc91906108f1565b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190610913565b506040805180820182528281524260208083018281523360008181526003909352858320945185559051600190940193909355925190928392859290917f55595f34fd936311e65eca0a752ee70068b8992fdf64918aff1b6345689c84e491a45050565b6000620186a08260065485600001516107599190610935565b6107639190610935565b61076d91906108f1565b60015484519192506001600160a01b03169063a9059cbb903390610792908590610954565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156107d857600080fd5b505af11580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190610913565b50825160405182919033907f54a9763035584fc4fcad1bc4e0e7a83f93e016f50ae32bd527530a77257393ee90600090a4505050565b60006020828403121561085857600080fd5b5035919050565b60006020828403121561087157600080fd5b81356001600160a01b038116811461088857600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156108ec576108ec6108c4565b500390565b60008261090e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561092557600080fd5b8151801515811461088857600080fd5b600081600019048311821515161561094f5761094f6108c4565b500290565b60008219821115610967576109676108c4565b50019056fea2646970667358221220d1fe7440b8fb43627c680f1fbe4dbabd8f59455b527cb278fed7341f0ee6d69a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80637547c7a311610097578063b066d06211610066578063b066d062146101f4578063c3dd76e214610227578063e40c358d1461024a578063f2fde38b1461025357600080fd5b80637547c7a31461018c5780637896bf1d1461019f5780638da5cb5b146101a757806395a1eba1146101b857600080fd5b80632d207929116100d35780632d20792914610156578063715018a61461015e578063751408c514610166578063752a50a61461017957600080fd5b806308262b42146100fa5780632c343a781461010f5780632c5b0df61461012b575b600080fd5b61010d610108366004610846565b610266565b005b61011860065481565b6040519081526020015b60405180910390f35b60015461013e906001600160a01b031681565b6040516001600160a01b039091168152602001610122565b61011861029e565b61010d6102d5565b61013e610174366004610846565b61030b565b61010d610187366004610846565b610335565b61010d61019a366004610846565b610364565b61010d610447565b6000546001600160a01b031661013e565b6101df6101c636600461085f565b6003602052600090815260409020805460019091015482565b60408051928352602083019190915201610122565b61021761020236600461085f565b60056020526000908152604090205460ff1681565b6040519015158152602001610122565b61021761023536600461085f565b60046020526000908152604090205460ff1681565b61011860075481565b61010d61026136600461085f565b610544565b6000546001600160a01b031633146102995760405162461bcd60e51b81526004016102909061088f565b60405180910390fd5b600755565b33600090815260036020908152604080832081518083019092528054825260010154918101919091526102d0906105dc565b905090565b6000546001600160a01b031633146102ff5760405162461bcd60e51b81526004016102909061088f565b6103096000610602565b565b6002818154811061031b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461035f5760405162461bcd60e51b81526004016102909061088f565b600655565b600081116103b45760405162461bcd60e51b815260206004820152601760248201527f7374616b696e6720616d6f756e742072657175697265640000000000000000006044820152606401610290565b3360009081526005602052604090205460ff16156104065760405162461bcd60e51b815260206004820152600f60248201526e616c7265616479207374616b696e6760881b6044820152606401610290565b61040f81610652565b3360009081526005602090815260408083208054600160ff199182168117909255600490935292208054909116909117905550565b50565b3360009081526005602052604090205460ff166104945760405162461bcd60e51b815260206004820152600b60248201526a6e6f74207374616b696e6760a81b6044820152606401610290565b3360009081526003602090815260408083208151808301909252805482526001015491810191909152906104c661029e565b905060075481101561051a5760405162461bcd60e51b815260206004820152601960248201527f6c6f636b2074696d6520686173206e6f742065787069726564000000000000006044820152606401610290565b6105248282610740565b610540336000908152600560205260409020805460ff19169055565b5050565b6000546001600160a01b0316331461056e5760405162461bcd60e51b81526004016102909061088f565b6001600160a01b0381166105d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610290565b61044481610602565b6000620151808260200151426105f291906108da565b6105fc91906108f1565b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190610913565b506040805180820182528281524260208083018281523360008181526003909352858320945185559051600190940193909355925190928392859290917f55595f34fd936311e65eca0a752ee70068b8992fdf64918aff1b6345689c84e491a45050565b6000620186a08260065485600001516107599190610935565b6107639190610935565b61076d91906108f1565b60015484519192506001600160a01b03169063a9059cbb903390610792908590610954565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156107d857600080fd5b505af11580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190610913565b50825160405182919033907f54a9763035584fc4fcad1bc4e0e7a83f93e016f50ae32bd527530a77257393ee90600090a4505050565b60006020828403121561085857600080fd5b5035919050565b60006020828403121561087157600080fd5b81356001600160a01b038116811461088857600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156108ec576108ec6108c4565b500390565b60008261090e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561092557600080fd5b8151801515811461088857600080fd5b600081600019048311821515161561094f5761094f6108c4565b500290565b60008219821115610967576109676108c4565b50019056fea2646970667358221220d1fe7440b8fb43627c680f1fbe4dbabd8f59455b527cb278fed7341f0ee6d69a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 435,
        "contract": "contracts/AstroStake.sol:AstroStake",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9069,
        "contract": "contracts/AstroStake.sol:AstroStake",
        "label": "Erc20Token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20)4075"
      },
      {
        "astId": 9077,
        "contract": "contracts/AstroStake.sol:AstroStake",
        "label": "stakersAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9082,
        "contract": "contracts/AstroStake.sol:AstroStake",
        "label": "lastStakesRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Stake)9074_storage)"
      },
      {
        "astId": 9086,
        "contract": "contracts/AstroStake.sol:AstroStake",
        "label": "hasEverStakedTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9090,
        "contract": "contracts/AstroStake.sol:AstroStake",
        "label": "isCurrentlyStakingTracker",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9092,
        "contract": "contracts/AstroStake.sol:AstroStake",
        "label": "stakeInterestRateWithFourDecimals",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9094,
        "contract": "contracts/AstroStake.sol:AstroStake",
        "label": "stakeLockTimeDay",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)4075": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Stake)9074_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SimpleStake.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)9074_storage"
      },
      "t_struct(Stake)9074_storage": {
        "encoding": "inplace",
        "label": "struct SimpleStake.Stake",
        "members": [
          {
            "astId": 9071,
            "contract": "contracts/AstroStake.sol:AstroStake",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9073,
            "contract": "contracts/AstroStake.sol:AstroStake",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}