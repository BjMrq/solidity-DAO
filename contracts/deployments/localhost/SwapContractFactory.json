{
  "address": "0x2F98359069877a07b137722D6d1580DC16e05559",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteTokenAddress",
          "type": "address"
        }
      ],
      "name": "DeployedSwapContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeRate",
          "type": "address"
        }
      ],
      "name": "deployNewSwapContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "deployedSwapContractsRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "swapContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "deployed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSwapPairs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapPairs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb71b9750a9015713cd1d3c929e32f3deca8900fba55d49b61436995d64e2cfe3",
  "receipt": {
    "to": null,
    "from": "0xAb7F4B57AFdb29A4F7263B662E1D0B4fF94B7f4A",
    "contractAddress": "0x2F98359069877a07b137722D6d1580DC16e05559",
    "transactionIndex": 0,
    "gasUsed": "1888237",
    "logsBloom": "0x
    "blockHash": "0xe4a03d2075d0978b096a67a4327b9d7c6483b40eb767dc331ee534c7956b840b",
    "transactionHash": "0xb71b9750a9015713cd1d3c929e32f3deca8900fba55d49b61436995d64e2cfe3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14,
        "transactionHash": "0xb71b9750a9015713cd1d3c929e32f3deca8900fba55d49b61436995d64e2cfe3",
        "address": "0x2F98359069877a07b137722D6d1580DC16e05559",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ab7f4b57afdb29a4f7263b662e1d0b4ff94b7f4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe4a03d2075d0978b096a67a4327b9d7c6483b40eb767dc331ee534c7956b840b"
      }
    ],
    "blockNumber": 14,
    "cumulativeGasUsed": "1888237",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc714930374d4b1b39729ff4ebbc5587",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"}],\"name\":\"DeployedSwapContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeRate\",\"type\":\"address\"}],\"name\":\"deployNewSwapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"deployedSwapContractsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"swapContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"deployed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSwapPairs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPairs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapContractFactory.sol\":\"SwapContractFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../governance/utils/IVotes.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is IVotes, ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x7fd2492be0468be4662081ee25cde38a31e4a0ceca0fed10160462389013910f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x8a763ef5625e97f5287c7ddd5ede434129069e15d83bf0a68ad10a5e56ccb439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/AstroToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\n\\ncontract AstroToken is ERC20Votes {\\n  constructor(uint256 _initialSupply) ERC20(\\\"Astro Light\\\", \\\"ASTRO\\\") ERC20Permit(\\\"Astro Light\\\") {\\n    _mint(msg.sender, _initialSupply);\\n  }\\n}\\n\",\"keccak256\":\"0xdc3e1f081c2837def7ae03084e43e065a747ff0f45fb9b6c0a2cc49cc9831232\",\"license\":\"MIT\"},\"contracts/ERC20TokensSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./AstroToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./Swapable.sol\\\";\\nimport \\\"./ISwapable.sol\\\";\\n\\ncontract ERC20TokensSwap is Context, Swapable {\\n  ERC20 public quoteToken;\\n  ERC20 public baseToken;\\n\\n  constructor(\\n    ERC20 _baseToken,\\n    ERC20 _quoteToken,\\n    address _exchangeRate\\n  ) Ratable(_exchangeRate) {\\n    quoteToken = _quoteToken;\\n    baseToken = _baseToken;\\n    pairName = concatenateThree(baseToken.symbol(), \\\"/\\\", quoteToken.symbol());\\n  }\\n\\n  function requireHasEnoughQuoteToken(address _addressToValidate, uint256 _requiredAmount)\\n    internal\\n    view\\n  {\\n    requireHasEnoughToken(quoteToken, _addressToValidate, _requiredAmount);\\n  }\\n\\n  function requireHasEnoughBaseToken(address _addressToValidate, uint256 _requiredAmount)\\n    internal\\n    view\\n  {\\n    requireHasEnoughToken(baseToken, _addressToValidate, _requiredAmount);\\n  }\\n\\n  function getAvailableBaseTokenLiquidity() public view returns (uint256) {\\n    return getAvailableTokenAmount(baseToken);\\n  }\\n\\n  function getAvailableQuoteTokenLiquidity() public view returns (uint256) {\\n    return getAvailableTokenAmount(quoteToken);\\n  }\\n\\n  //////////////////////////\\n  ///// Buy base token /////\\n  //////////////////////////\\n\\n  function getBidPrice(uint256 _quoteTokenAmount) public override returns (uint256) {\\n    uint256 baseTokenAmountToExchange = getBaseTokenAmountFromRate(_quoteTokenAmount);\\n\\n    emit SwapRateInfo(\\n      concatenateTwo(\\\"Bid \\\", pairName),\\n      _quoteTokenAmount,\\n      baseTokenAmountToExchange\\n    );\\n\\n    return baseTokenAmountToExchange;\\n  }\\n\\n  function swapQuoteForBaseToken(uint256 _quoteTokenAmount) external payable override {\\n    requireHasEnoughQuoteToken(_msgSender(), _quoteTokenAmount);\\n\\n    uint256 baseTokenAmount = getBidPrice(_quoteTokenAmount);\\n\\n    requireHasEnoughBaseToken(address(this), baseTokenAmount);\\n\\n    quoteToken.transferFrom(_msgSender(), address(this), _quoteTokenAmount);\\n    baseToken.transfer(_msgSender(), baseTokenAmount);\\n\\n    emit SwapTransferInfo(_msgSender(), _quoteTokenAmount, baseTokenAmount);\\n  }\\n\\n  ///////////////////////////\\n  ///// Sell base token /////\\n  ///////////////////////////\\n\\n  function getAskPrice(uint256 _baseTokenAmount) public override returns (uint256) {\\n    uint256 quoteTokenToExchange = getQuoteTokenAmountForFromRate(_baseTokenAmount);\\n\\n    emit SwapRateInfo(concatenateTwo(\\\"Ask \\\", pairName), _baseTokenAmount, quoteTokenToExchange);\\n\\n    return quoteTokenToExchange;\\n  }\\n\\n  function swapBaseForQuoteToken(uint256 _baseTokenAmount) external payable override {\\n    requireHasEnoughBaseToken(_msgSender(), _baseTokenAmount);\\n\\n    uint256 quoteTokenAmount = getAskPrice(_baseTokenAmount);\\n\\n    requireHasEnoughQuoteToken(address(this), quoteTokenAmount);\\n\\n    baseToken.transferFrom(_msgSender(), address(this), _baseTokenAmount);\\n    quoteToken.transfer(_msgSender(), quoteTokenAmount);\\n\\n    emit SwapTransferInfo(_msgSender(), msg.value, quoteTokenAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x1eb97c2f07cc7db661c0f9d593ad8a615f2d70d56482f2dfd7ab3d14e62686cf\",\"license\":\"MIT\"},\"contracts/ISwapable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nabstract contract ISwapable {\\n    string public pairName;\\n\\n    function getAskPrice(uint256 _ERC20TokenAmount) public virtual returns (uint256);\\n\\n    function swapBaseForQuoteToken(uint256 _ERC20TokenAmount) external payable virtual;\\n\\n    function getBidPrice(uint256 _satiAmount) public virtual returns (uint256);\\n\\n    function swapQuoteForBaseToken(uint256 _satiAmount) external payable virtual;\\n}\\n\",\"keccak256\":\"0x72c18eb627599a82d8752582d858b52f2e65e1f16605a981b6fb984da9b1653d\",\"license\":\"MIT\"},\"contracts/Ratable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract Ratable {\\n    event Rate(int256 indexed scaledPrice, uint256 indexed timeStamp);\\n\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor(address _priceFeedContract) {\\n        priceFeed = AggregatorV3Interface(_priceFeedContract);\\n    }\\n\\n    function scaleTokenForMultiplication(uint256 _tokenAmount, uint8 _decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _tokenAmount / uint256(10**uint256(_decimals));\\n    }\\n\\n    function scaleTokenForDivision(uint256 _tokenAmount, uint8 _decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _tokenAmount * uint256(10**uint256(_decimals));\\n    }\\n\\n    function scalePrice(\\n        int256 _price,\\n        uint8 _priceDecimals,\\n        uint8 _decimals\\n    ) internal pure returns (int256) {\\n        if (_priceDecimals < _decimals) {\\n            return _price * int256(10**uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / int256(10**uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n    function getScaledRate(uint8 _scalingDecimal) public returns (int256) {\\n        (, int256 price, , uint256 timeStamp, ) = priceFeed.latestRoundData();\\n        uint8 decimals = priceFeed.decimals();\\n\\n        int256 scaledPrice = scalePrice(price, decimals, _scalingDecimal);\\n\\n        emit Rate(scaledPrice, timeStamp);\\n\\n        return scaledPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x686447223ce97bcc66c4763c3055d461dd4af849d680e4042bc257bb17029734\",\"license\":\"MIT\"},\"contracts/SwapContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./AstroToken.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ERC20TokensSwap.sol\\\";\\n\\ncontract SwapContractFactory is Ownable, Utils {\\n  struct SwapAndTokenAddresses {\\n    address swapContractAddress;\\n    address quoteTokenAddress;\\n    address baseTokenAddress;\\n    bool deployed;\\n  }\\n\\n  event DeployedSwapContract(\\n    address indexed swapContractAddress,\\n    address indexed baseTokenAddress,\\n    address indexed quoteTokenAddress\\n  );\\n\\n  string[] public swapPairs;\\n  mapping(string => SwapAndTokenAddresses) public deployedSwapContractsRegistry;\\n\\n  function deployNewSwapContract(\\n    ERC20 _baseToken,\\n    ERC20 _quoteToken,\\n    address _exchangeRate\\n  ) external onlyOwner {\\n    ERC20TokensSwap swapContract = new ERC20TokensSwap(_baseToken, _quoteToken, _exchangeRate);\\n\\n    string memory deployedPair = swapContract.pairName();\\n\\n    require(\\n      !deployedSwapContractsRegistry[deployedPair].deployed,\\n      \\\"already deployed\\\"\\n    );\\n\\n    swapPairs.push(deployedPair);\\n\\n    deployedSwapContractsRegistry[deployedPair] = SwapAndTokenAddresses({\\n      swapContractAddress: address(swapContract),\\n      quoteTokenAddress: address(_quoteToken),\\n      baseTokenAddress: address(_baseToken),\\n      deployed: true\\n    });\\n\\n    emit DeployedSwapContract(address(swapContract), address(_baseToken), address(_quoteToken));\\n  }\\n\\n  function getAllSwapPairs() external view returns (string[] memory) {\\n    return swapPairs;\\n  }\\n}\\n\",\"keccak256\":\"0xf2099f3688c093c1c4bb6db21db13105ed68d799f4b5df32cce18ea89bb22e87\",\"license\":\"MIT\"},\"contracts/Swapable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./Ratable.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./ISwapable.sol\\\";\\n\\nabstract contract Swapable is Ratable, Utils, ISwapable {\\n    uint8 private precisionDecimals = 18;\\n\\n    event SwapTransferInfo(\\n        address indexed beneficiary,\\n        uint256 indexed amountSent,\\n        uint256 indexed amountReceived\\n    );\\n\\n    event SwapRateInfo(\\n        string indexed exchangeType,\\n        uint256 indexed sellingAmount,\\n        uint256 indexed buyingAmount\\n    );\\n\\n    function requireHasEnoughToken(\\n        ERC20 _tokenAddress,\\n        address _addressToValidate,\\n        uint256 _requiredAmount\\n    ) internal view {\\n        require(\\n            _tokenAddress.balanceOf(_addressToValidate) >= _requiredAmount,\\n            concatenateTwo(\\\"Not enough \\\", _tokenAddress.symbol())\\n        );\\n    }\\n\\n    function getAvailableTokenAmount(ERC20 _tokenToCheckBalanceOf) internal view returns (uint256) {\\n        return _tokenToCheckBalanceOf.balanceOf(address(this));\\n    }\\n\\n    function getQuoteTokenAmountForFromRate(uint256 _ERC20TokenAmount) internal returns (uint256) {\\n        int256 exchangeRate = getScaledRate(precisionDecimals);\\n\\n        return\\n            scaleTokenForMultiplication(_ERC20TokenAmount, precisionDecimals) *\\n            uint256(exchangeRate);\\n    }\\n\\n    function getBaseTokenAmountFromRate(uint256 _satiAmount) internal returns (uint256) {\\n        int256 exchangeRate = getScaledRate(precisionDecimals);\\n\\n        return scaleTokenForDivision(_satiAmount, precisionDecimals) / uint256(exchangeRate);\\n    }\\n}\\n\",\"keccak256\":\"0xb00750936c2b5f00b92a8bb148ffb78ae64458edf6b584a2551b1469911ca59d\",\"license\":\"MIT\"},\"contracts/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ncontract Utils {\\n    function concatenateTwo(string memory partOne, string memory partTwo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(partOne, partTwo));\\n    }\\n\\n    function concatenateThree(\\n        string memory partOne,\\n        string memory partTwo,\\n        string memory partThree\\n    ) internal pure returns (string memory) {\\n        return concatenateTwo(concatenateTwo(partOne, partTwo), partThree);\\n    }\\n}\\n\",\"keccak256\":\"0xa0bec3ec7fd5643033c4bdac2b513d603d2456bebd442cc7ddd8c4ea53dee253\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6120cd8061007e6000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80638dc8346a11620000625780638dc8346a14620000cf57806398499999146200015f578063e891749c1462000178578063f2fde38b146200019e57600080fd5b806334b71732146200008c578063715018a614620000a55780638da5cb5b14620000af575b600080fd5b620000a36200009d366004620007ef565b620001b5565b005b620000a362000460565b6000546040516001600160a01b0390911681526020015b60405180910390f35b62000129620000e0366004620008b6565b8051602081830181018051600280835293830192909401919091209290528154600183015492909101546001600160a01b0391821692821691811690600160a01b900460ff1684565b604051620000c694939291906001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b620001696200049b565b604051620000c691906200099f565b6200018f6200018936600462000a05565b6200057e565b604051620000c6919062000a1f565b620000a3620001af36600462000a3b565b62000633565b6000546001600160a01b03163314620001eb5760405162461bcd60e51b8152600401620001e29062000a5b565b60405180910390fd5b6000838383604051620001fe9062000725565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f0801580156200023b573d6000803e3d6000fd5b5090506000816001600160a01b03166340794c3b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156200027a57600080fd5b505afa1580156200028f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002b9919081019062000a90565b9050600281604051620002cd919062000b10565b9081526040519081900360200190206002015460ff600160a01b90910416156200032d5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e4819195c1b1bde595960821b6044820152606401620001e2565b600180548082018255600091909152815162000371917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190602084019062000733565b50604080516080810182526001600160a01b0380851682528681166020830152871681830152600160608201529051600290620003b090849062000b10565b908152604080519182900360209081018320845181546001600160a01b039182166001600160a01b031991821617835592860151600183018054918316919094161790925591840151600290920180546060909501511515600160a01b026001600160a81b0319909516928216929092179390931790558582169187811691908516907feef44cf01478bb2191a265ef9eaacaeb1c7c10eabed8d7e76e46c6ec77e04afa90600090a45050505050565b6000546001600160a01b031633146200048d5760405162461bcd60e51b8152600401620001e29062000a5b565b620004996000620006d5565b565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101562000575578382906000526020600020018054620004e19062000b2e565b80601f01602080910402602001604051908101604052809291908181526020018280546200050f9062000b2e565b8015620005605780601f10620005345761010080835404028352916020019162000560565b820191906000526020600020905b8154815290600101906020018083116200054257829003601f168201915b505050505081526020019060010190620004bf565b50505050905090565b600181815481106200058f57600080fd5b906000526020600020016000915090508054620005ac9062000b2e565b80601f0160208091040260200160405190810160405280929190818152602001828054620005da9062000b2e565b80156200062b5780601f10620005ff576101008083540402835291602001916200062b565b820191906000526020600020905b8154815290600101906020018083116200060d57829003601f168201915b505050505081565b6000546001600160a01b03163314620006605760405162461bcd60e51b8152600401620001e29062000a5b565b6001600160a01b038116620006c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001e2565b620006d281620006d5565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61152c8062000b6c83390190565b828054620007419062000b2e565b90600052602060002090601f016020900481019282620007655760008555620007b0565b82601f106200078057805160ff1916838001178555620007b0565b82800160010185558215620007b0579182015b82811115620007b057825182559160200191906001019062000793565b50620007be929150620007c2565b5090565b5b80821115620007be5760008155600101620007c3565b6001600160a01b0381168114620006d257600080fd5b6000806000606084860312156200080557600080fd5b83356200081281620007d9565b925060208401356200082481620007d9565b915060408401356200083681620007d9565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000883576200088362000841565b604052919050565b600067ffffffffffffffff821115620008a857620008a862000841565b50601f01601f191660200190565b600060208284031215620008c957600080fd5b813567ffffffffffffffff811115620008e157600080fd5b8201601f81018413620008f357600080fd5b80356200090a62000904826200088b565b62000857565b8181528560208385010111156200092057600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b838110156200095b57818101518382015260200162000941565b838111156200096b576000848401525b50505050565b600081518084526200098b8160208601602086016200093e565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015620009f857603f19888603018452620009e585835162000971565b94509285019290850190600101620009c6565b5092979650505050505050565b60006020828403121562000a1857600080fd5b5035919050565b60208152600062000a34602083018462000971565b9392505050565b60006020828403121562000a4e57600080fd5b813562000a3481620007d9565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121562000aa357600080fd5b815167ffffffffffffffff81111562000abb57600080fd5b8201601f8101841362000acd57600080fd5b805162000ade62000904826200088b565b81815285602083850101111562000af457600080fd5b62000b078260208301602086016200093e565b95945050505050565b6000825162000b248184602087016200093e565b9190910192915050565b600181811c9082168062000b4357607f821691505b6020821081141562000b6557634e487b7160e01b600052602260045260246000fd5b5091905056fe60806040526002805460ff191660121790553480156200001e57600080fd5b506040516200152c3803806200152c8339810160408190526200004191620002dc565b600080546001600160a01b038084166001600160a01b03199283161783556002805486831661010002610100600160a81b031990911617905560038054918716919092168117909155604080516395d89b4160e01b81529051620001ae936395d89b419260048082019391829003018186803b158015620000c157600080fd5b505afa158015620000d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000100919081019062000379565b604051806040016040528060018152602001602f60f81b815250600260019054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200016957600080fd5b505afa1580156200017e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001a8919081019062000379565b620001ce565b8051620001c4916001916020909101906200021d565b50505050620004a1565b6060620001e7620001e08585620001ef565b83620001ef565b949350505050565b606082826040516020016200020692919062000431565b604051602081830303815290604052905092915050565b8280546200022b9062000464565b90600052602060002090601f0160209004810192826200024f57600085556200029a565b82601f106200026a57805160ff19168380011785556200029a565b828001600101855582156200029a579182015b828111156200029a5782518255916020019190600101906200027d565b50620002a8929150620002ac565b5090565b5b80821115620002a85760008155600101620002ad565b6001600160a01b0381168114620002d957600080fd5b50565b600080600060608486031215620002f257600080fd5b8351620002ff81620002c3565b60208501519093506200031281620002c3565b60408501519092506200032581620002c3565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200036357818101518382015260200162000349565b8381111562000373576000848401525b50505050565b6000602082840312156200038c57600080fd5b81516001600160401b0380821115620003a457600080fd5b818401915084601f830112620003b957600080fd5b815181811115620003ce57620003ce62000330565b604051601f8201601f19908116603f01168101908382118183101715620003f957620003f962000330565b816040528281528760208487010111156200041357600080fd5b6200042683602083016020880162000346565b979650505050505050565b600083516200044581846020880162000346565b8351908301906200045b81836020880162000346565b01949350505050565b600181811c908216806200047957607f821691505b602082108114156200049b57634e487b7160e01b600052602260045260246000fd5b50919050565b61107b80620004b16000396000f3fe6080604052600436106100915760003560e01c80639d0ba183116100595780639d0ba1831461015d578063ad5d203c1461017d578063c55dae6314610192578063c8a24fb1146101b2578063d880c370146101c757600080fd5b80630c57004a14610096578063217a4b70146100c9578063217eb0ae1461010657806340794c3b1461011b5780639b013aee1461013d575b600080fd5b3480156100a257600080fd5b506100b66100b1366004610b69565b6101da565b6040519081526020015b60405180910390f35b3480156100d557600080fd5b506002546100ee9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b34801561011257600080fd5b506100b66102dd565b34801561012757600080fd5b506101306102fa565b6040516100c09190610bae565b34801561014957600080fd5b506100b6610158366004610b69565b610388565b34801561016957600080fd5b506100b6610178366004610bf3565b6103c5565b61019061018b366004610b69565b610525565b005b34801561019e57600080fd5b506003546100ee906001600160a01b031681565b3480156101be57600080fd5b506100b66106b4565b6101906101d5366004610b69565b6106d1565b6000806101e68361082b565b9050808361029a60405180604001604052806004815260200163020b9b5960e51b8152506001805461021790610c10565b80601f016020809104026020016040519081016040528092919081815260200182805461024390610c10565b80156102905780601f1061026557610100808354040283529160200191610290565b820191906000526020600020905b81548152906001019060200180831161027357829003601f168201915b5050505050610866565b6040516102a79190610c4b565b604051908190038120907f88350a00c9d980accf5486d4817c4f938edc6aa8a526efb4c9eaa7e12c69f4cb90600090a492915050565b6003546000906102f5906001600160a01b0316610893565b905090565b6001805461030790610c10565b80601f016020809104026020016040519081016040528092919081815260200182805461033390610c10565b80156103805780601f1061035557610100808354040283529160200191610380565b820191906000526020600020905b81548152906001019060200180831161036357829003601f168201915b505050505081565b6000806103948361090d565b9050808361029a6040518060400160405280600481526020016302134b2160e51b8152506001805461021790610c10565b60008060008060009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561041757600080fd5b505afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f9190610c86565b5093505092505060008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610cd6565b905060006104ec848388610941565b905082817fb6c1393c2251d5f83b6b4923759cf156e72f269dc654f872eab19c92b853cf5e60405160405180910390a395945050505050565b61052f33826109b2565b600061053a826101da565b905061054630826109cd565b6003546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b1580156105a657600080fd5b505af11580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190610cf3565b5060025461010090046001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561063e57600080fd5b505af1158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190610cf3565b508034335b6001600160a01b03167f42daeb9fe1f789384a4e1fd40506a3a12cec73b4c4ea3302b3c501c8e044aebb60405160405180910390a45050565b6002546000906102f59061010090046001600160a01b0316610893565b6106db33826109cd565b60006106e682610388565b90506106f230826109b2565b60025461010090046001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b15801561075757600080fd5b505af115801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f9190610cf3565b506003546001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156107ea57600080fd5b505af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190610cf3565b5080823361067b565b600254600090819061083f9060ff166103c5565b600254909150819061085590859060ff166109e9565b61085f9190610d2b565b9392505050565b6060828260405160200161087b929190610d4a565b60405160208183030381529060405290505b92915050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156108d557600080fd5b505afa1580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190610d79565b60025460009081906109219060ff166103c5565b600254909150819061093790859060ff16610a03565b61085f9190610da8565b60008160ff168360ff16101561097a5761095b8383610dbc565b6109699060ff16600a610ec3565b6109739085610ecf565b905061085f565b8160ff168360ff1611156109aa576109928284610dbc565b6109a09060ff16600a610ec3565b6109739085610f54565b509192915050565b6003546109c9906001600160a01b03168383610a1d565b5050565b6002546109c99061010090046001600160a01b03168383610a1d565b60006109f960ff8316600a610ec3565b61085f9084610da8565b6000610a1360ff8316600a610ec3565b61085f9084610d2b565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a082319060240160206040518083038186803b158015610a6157600080fd5b505afa158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a999190610d79565b1015610b3c6040518060400160405280600b81526020016a02737ba1032b737bab3b4160ad1b815250856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610afb57600080fd5b505afa158015610b0f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b379190810190610f98565b610866565b90610b635760405162461bcd60e51b8152600401610b5a9190610bae565b60405180910390fd5b50505050565b600060208284031215610b7b57600080fd5b5035919050565b60005b83811015610b9d578181015183820152602001610b85565b83811115610b635750506000910152565b6020815260008251806020840152610bcd816040850160208701610b82565b601f01601f19169190910160400192915050565b60ff81168114610bf057600080fd5b50565b600060208284031215610c0557600080fd5b813561085f81610be1565b600181811c90821680610c2457607f821691505b60208210811415610c4557634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610c5d818460208701610b82565b9190910192915050565b805169ffffffffffffffffffff81168114610c8157600080fd5b919050565b600080600080600060a08688031215610c9e57600080fd5b610ca786610c67565b9450602086015193506040860151925060608601519150610cca60808701610c67565b90509295509295909350565b600060208284031215610ce857600080fd5b815161085f81610be1565b600060208284031215610d0557600080fd5b8151801515811461085f57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610d4557610d45610d15565b500290565b60008351610d5c818460208801610b82565b835190830190610d70818360208801610b82565b01949350505050565b600060208284031215610d8b57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082610db757610db7610d92565b500490565b600060ff821660ff841680821015610dd657610dd6610d15565b90039392505050565b600181815b80851115610e1a578160001904821115610e0057610e00610d15565b80851615610e0d57918102915b93841c9390800290610de4565b509250929050565b600082610e315750600161088d565b81610e3e5750600061088d565b8160018114610e545760028114610e5e57610e7a565b600191505061088d565b60ff841115610e6f57610e6f610d15565b50506001821b61088d565b5060208310610133831016604e8410600b8410161715610e9d575081810a61088d565b610ea78383610ddf565b8060001904821115610ebb57610ebb610d15565b029392505050565b600061085f8383610e22565b60006001600160ff1b0381841382841380821686840486111615610ef557610ef5610d15565b600160ff1b6000871282811687830589121615610f1457610f14610d15565b60008712925087820587128484161615610f3057610f30610d15565b87850587128184161615610f4657610f46610d15565b505050929093029392505050565b600082610f6357610f63610d92565b600160ff1b821460001984141615610f7d57610f7d610d15565b500590565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610faa57600080fd5b815167ffffffffffffffff80821115610fc257600080fd5b818401915084601f830112610fd657600080fd5b815181811115610fe857610fe8610f82565b604051601f8201601f19908116603f0116810190838211818310171561101057611010610f82565b8160405282815287602084870101111561102957600080fd5b61103a836020830160208801610b82565b97965050505050505056fea2646970667358221220cea5e992f508cd83cfb200f53686a053655a1dca5cc750e0cd2cd8d8c4d7cf0664736f6c63430008090033a264697066735822122035d1fd15d446f90000fc2381cf57d21211a4bc7d5dd940abb57a6c91a98ab8f164736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000875760003560e01c80638dc8346a11620000625780638dc8346a14620000cf57806398499999146200015f578063e891749c1462000178578063f2fde38b146200019e57600080fd5b806334b71732146200008c578063715018a614620000a55780638da5cb5b14620000af575b600080fd5b620000a36200009d366004620007ef565b620001b5565b005b620000a362000460565b6000546040516001600160a01b0390911681526020015b60405180910390f35b62000129620000e0366004620008b6565b8051602081830181018051600280835293830192909401919091209290528154600183015492909101546001600160a01b0391821692821691811690600160a01b900460ff1684565b604051620000c694939291906001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b620001696200049b565b604051620000c691906200099f565b6200018f6200018936600462000a05565b6200057e565b604051620000c6919062000a1f565b620000a3620001af36600462000a3b565b62000633565b6000546001600160a01b03163314620001eb5760405162461bcd60e51b8152600401620001e29062000a5b565b60405180910390fd5b6000838383604051620001fe9062000725565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f0801580156200023b573d6000803e3d6000fd5b5090506000816001600160a01b03166340794c3b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156200027a57600080fd5b505afa1580156200028f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002b9919081019062000a90565b9050600281604051620002cd919062000b10565b9081526040519081900360200190206002015460ff600160a01b90910416156200032d5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e4819195c1b1bde595960821b6044820152606401620001e2565b600180548082018255600091909152815162000371917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190602084019062000733565b50604080516080810182526001600160a01b0380851682528681166020830152871681830152600160608201529051600290620003b090849062000b10565b908152604080519182900360209081018320845181546001600160a01b039182166001600160a01b031991821617835592860151600183018054918316919094161790925591840151600290920180546060909501511515600160a01b026001600160a81b0319909516928216929092179390931790558582169187811691908516907feef44cf01478bb2191a265ef9eaacaeb1c7c10eabed8d7e76e46c6ec77e04afa90600090a45050505050565b6000546001600160a01b031633146200048d5760405162461bcd60e51b8152600401620001e29062000a5b565b620004996000620006d5565b565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101562000575578382906000526020600020018054620004e19062000b2e565b80601f01602080910402602001604051908101604052809291908181526020018280546200050f9062000b2e565b8015620005605780601f10620005345761010080835404028352916020019162000560565b820191906000526020600020905b8154815290600101906020018083116200054257829003601f168201915b505050505081526020019060010190620004bf565b50505050905090565b600181815481106200058f57600080fd5b906000526020600020016000915090508054620005ac9062000b2e565b80601f0160208091040260200160405190810160405280929190818152602001828054620005da9062000b2e565b80156200062b5780601f10620005ff576101008083540402835291602001916200062b565b820191906000526020600020905b8154815290600101906020018083116200060d57829003601f168201915b505050505081565b6000546001600160a01b03163314620006605760405162461bcd60e51b8152600401620001e29062000a5b565b6001600160a01b038116620006c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001e2565b620006d281620006d5565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61152c8062000b6c83390190565b828054620007419062000b2e565b90600052602060002090601f016020900481019282620007655760008555620007b0565b82601f106200078057805160ff1916838001178555620007b0565b82800160010185558215620007b0579182015b82811115620007b057825182559160200191906001019062000793565b50620007be929150620007c2565b5090565b5b80821115620007be5760008155600101620007c3565b6001600160a01b0381168114620006d257600080fd5b6000806000606084860312156200080557600080fd5b83356200081281620007d9565b925060208401356200082481620007d9565b915060408401356200083681620007d9565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000883576200088362000841565b604052919050565b600067ffffffffffffffff821115620008a857620008a862000841565b50601f01601f191660200190565b600060208284031215620008c957600080fd5b813567ffffffffffffffff811115620008e157600080fd5b8201601f81018413620008f357600080fd5b80356200090a62000904826200088b565b62000857565b8181528560208385010111156200092057600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b838110156200095b57818101518382015260200162000941565b838111156200096b576000848401525b50505050565b600081518084526200098b8160208601602086016200093e565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015620009f857603f19888603018452620009e585835162000971565b94509285019290850190600101620009c6565b5092979650505050505050565b60006020828403121562000a1857600080fd5b5035919050565b60208152600062000a34602083018462000971565b9392505050565b60006020828403121562000a4e57600080fd5b813562000a3481620007d9565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121562000aa357600080fd5b815167ffffffffffffffff81111562000abb57600080fd5b8201601f8101841362000acd57600080fd5b805162000ade62000904826200088b565b81815285602083850101111562000af457600080fd5b62000b078260208301602086016200093e565b95945050505050565b6000825162000b248184602087016200093e565b9190910192915050565b600181811c9082168062000b4357607f821691505b6020821081141562000b6557634e487b7160e01b600052602260045260246000fd5b5091905056fe60806040526002805460ff191660121790553480156200001e57600080fd5b506040516200152c3803806200152c8339810160408190526200004191620002dc565b600080546001600160a01b038084166001600160a01b03199283161783556002805486831661010002610100600160a81b031990911617905560038054918716919092168117909155604080516395d89b4160e01b81529051620001ae936395d89b419260048082019391829003018186803b158015620000c157600080fd5b505afa158015620000d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000100919081019062000379565b604051806040016040528060018152602001602f60f81b815250600260019054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200016957600080fd5b505afa1580156200017e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001a8919081019062000379565b620001ce565b8051620001c4916001916020909101906200021d565b50505050620004a1565b6060620001e7620001e08585620001ef565b83620001ef565b949350505050565b606082826040516020016200020692919062000431565b604051602081830303815290604052905092915050565b8280546200022b9062000464565b90600052602060002090601f0160209004810192826200024f57600085556200029a565b82601f106200026a57805160ff19168380011785556200029a565b828001600101855582156200029a579182015b828111156200029a5782518255916020019190600101906200027d565b50620002a8929150620002ac565b5090565b5b80821115620002a85760008155600101620002ad565b6001600160a01b0381168114620002d957600080fd5b50565b600080600060608486031215620002f257600080fd5b8351620002ff81620002c3565b60208501519093506200031281620002c3565b60408501519092506200032581620002c3565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200036357818101518382015260200162000349565b8381111562000373576000848401525b50505050565b6000602082840312156200038c57600080fd5b81516001600160401b0380821115620003a457600080fd5b818401915084601f830112620003b957600080fd5b815181811115620003ce57620003ce62000330565b604051601f8201601f19908116603f01168101908382118183101715620003f957620003f962000330565b816040528281528760208487010111156200041357600080fd5b6200042683602083016020880162000346565b979650505050505050565b600083516200044581846020880162000346565b8351908301906200045b81836020880162000346565b01949350505050565b600181811c908216806200047957607f821691505b602082108114156200049b57634e487b7160e01b600052602260045260246000fd5b50919050565b61107b80620004b16000396000f3fe6080604052600436106100915760003560e01c80639d0ba183116100595780639d0ba1831461015d578063ad5d203c1461017d578063c55dae6314610192578063c8a24fb1146101b2578063d880c370146101c757600080fd5b80630c57004a14610096578063217a4b70146100c9578063217eb0ae1461010657806340794c3b1461011b5780639b013aee1461013d575b600080fd5b3480156100a257600080fd5b506100b66100b1366004610b69565b6101da565b6040519081526020015b60405180910390f35b3480156100d557600080fd5b506002546100ee9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b34801561011257600080fd5b506100b66102dd565b34801561012757600080fd5b506101306102fa565b6040516100c09190610bae565b34801561014957600080fd5b506100b6610158366004610b69565b610388565b34801561016957600080fd5b506100b6610178366004610bf3565b6103c5565b61019061018b366004610b69565b610525565b005b34801561019e57600080fd5b506003546100ee906001600160a01b031681565b3480156101be57600080fd5b506100b66106b4565b6101906101d5366004610b69565b6106d1565b6000806101e68361082b565b9050808361029a60405180604001604052806004815260200163020b9b5960e51b8152506001805461021790610c10565b80601f016020809104026020016040519081016040528092919081815260200182805461024390610c10565b80156102905780601f1061026557610100808354040283529160200191610290565b820191906000526020600020905b81548152906001019060200180831161027357829003601f168201915b5050505050610866565b6040516102a79190610c4b565b604051908190038120907f88350a00c9d980accf5486d4817c4f938edc6aa8a526efb4c9eaa7e12c69f4cb90600090a492915050565b6003546000906102f5906001600160a01b0316610893565b905090565b6001805461030790610c10565b80601f016020809104026020016040519081016040528092919081815260200182805461033390610c10565b80156103805780601f1061035557610100808354040283529160200191610380565b820191906000526020600020905b81548152906001019060200180831161036357829003601f168201915b505050505081565b6000806103948361090d565b9050808361029a6040518060400160405280600481526020016302134b2160e51b8152506001805461021790610c10565b60008060008060009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561041757600080fd5b505afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f9190610c86565b5093505092505060008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610cd6565b905060006104ec848388610941565b905082817fb6c1393c2251d5f83b6b4923759cf156e72f269dc654f872eab19c92b853cf5e60405160405180910390a395945050505050565b61052f33826109b2565b600061053a826101da565b905061054630826109cd565b6003546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b1580156105a657600080fd5b505af11580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190610cf3565b5060025461010090046001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561063e57600080fd5b505af1158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190610cf3565b508034335b6001600160a01b03167f42daeb9fe1f789384a4e1fd40506a3a12cec73b4c4ea3302b3c501c8e044aebb60405160405180910390a45050565b6002546000906102f59061010090046001600160a01b0316610893565b6106db33826109cd565b60006106e682610388565b90506106f230826109b2565b60025461010090046001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b15801561075757600080fd5b505af115801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f9190610cf3565b506003546001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156107ea57600080fd5b505af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190610cf3565b5080823361067b565b600254600090819061083f9060ff166103c5565b600254909150819061085590859060ff166109e9565b61085f9190610d2b565b9392505050565b6060828260405160200161087b929190610d4a565b60405160208183030381529060405290505b92915050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156108d557600080fd5b505afa1580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190610d79565b60025460009081906109219060ff166103c5565b600254909150819061093790859060ff16610a03565b61085f9190610da8565b60008160ff168360ff16101561097a5761095b8383610dbc565b6109699060ff16600a610ec3565b6109739085610ecf565b905061085f565b8160ff168360ff1611156109aa576109928284610dbc565b6109a09060ff16600a610ec3565b6109739085610f54565b509192915050565b6003546109c9906001600160a01b03168383610a1d565b5050565b6002546109c99061010090046001600160a01b03168383610a1d565b60006109f960ff8316600a610ec3565b61085f9084610da8565b6000610a1360ff8316600a610ec3565b61085f9084610d2b565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a082319060240160206040518083038186803b158015610a6157600080fd5b505afa158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a999190610d79565b1015610b3c6040518060400160405280600b81526020016a02737ba1032b737bab3b4160ad1b815250856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610afb57600080fd5b505afa158015610b0f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b379190810190610f98565b610866565b90610b635760405162461bcd60e51b8152600401610b5a9190610bae565b60405180910390fd5b50505050565b600060208284031215610b7b57600080fd5b5035919050565b60005b83811015610b9d578181015183820152602001610b85565b83811115610b635750506000910152565b6020815260008251806020840152610bcd816040850160208701610b82565b601f01601f19169190910160400192915050565b60ff81168114610bf057600080fd5b50565b600060208284031215610c0557600080fd5b813561085f81610be1565b600181811c90821680610c2457607f821691505b60208210811415610c4557634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610c5d818460208701610b82565b9190910192915050565b805169ffffffffffffffffffff81168114610c8157600080fd5b919050565b600080600080600060a08688031215610c9e57600080fd5b610ca786610c67565b9450602086015193506040860151925060608601519150610cca60808701610c67565b90509295509295909350565b600060208284031215610ce857600080fd5b815161085f81610be1565b600060208284031215610d0557600080fd5b8151801515811461085f57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610d4557610d45610d15565b500290565b60008351610d5c818460208801610b82565b835190830190610d70818360208801610b82565b01949350505050565b600060208284031215610d8b57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082610db757610db7610d92565b500490565b600060ff821660ff841680821015610dd657610dd6610d15565b90039392505050565b600181815b80851115610e1a578160001904821115610e0057610e00610d15565b80851615610e0d57918102915b93841c9390800290610de4565b509250929050565b600082610e315750600161088d565b81610e3e5750600061088d565b8160018114610e545760028114610e5e57610e7a565b600191505061088d565b60ff841115610e6f57610e6f610d15565b50506001821b61088d565b5060208310610133831016604e8410600b8410161715610e9d575081810a61088d565b610ea78383610ddf565b8060001904821115610ebb57610ebb610d15565b029392505050565b600061085f8383610e22565b60006001600160ff1b0381841382841380821686840486111615610ef557610ef5610d15565b600160ff1b6000871282811687830589121615610f1457610f14610d15565b60008712925087820587128484161615610f3057610f30610d15565b87850587128184161615610f4657610f46610d15565b505050929093029392505050565b600082610f6357610f63610d92565b600160ff1b821460001984141615610f7d57610f7d610d15565b500590565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610faa57600080fd5b815167ffffffffffffffff80821115610fc257600080fd5b818401915084601f830112610fd657600080fd5b815181811115610fe857610fe8610f82565b604051601f8201601f19908116603f0116810190838211818310171561101057611010610f82565b8160405282815287602084870101111561102957600080fd5b61103a836020830160208801610b82565b97965050505050505056fea2646970667358221220cea5e992f508cd83cfb200f53686a053655a1dca5cc750e0cd2cd8d8c4d7cf0664736f6c63430008090033a264697066735822122035d1fd15d446f90000fc2381cf57d21211a4bc7d5dd940abb57a6c91a98ab8f164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 435,
        "contract": "contracts/SwapContractFactory.sol:SwapContractFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9397,
        "contract": "contracts/SwapContractFactory.sol:SwapContractFactory",
        "label": "swapPairs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 9402,
        "contract": "contracts/SwapContractFactory.sol:SwapContractFactory",
        "label": "deployedSwapContractsRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(SwapAndTokenAddresses)9386_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_struct(SwapAndTokenAddresses)9386_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SwapContractFactory.SwapAndTokenAddresses)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapAndTokenAddresses)9386_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SwapAndTokenAddresses)9386_storage": {
        "encoding": "inplace",
        "label": "struct SwapContractFactory.SwapAndTokenAddresses",
        "members": [
          {
            "astId": 9379,
            "contract": "contracts/SwapContractFactory.sol:SwapContractFactory",
            "label": "swapContractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9381,
            "contract": "contracts/SwapContractFactory.sol:SwapContractFactory",
            "label": "quoteTokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9383,
            "contract": "contracts/SwapContractFactory.sol:SwapContractFactory",
            "label": "baseTokenAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9385,
            "contract": "contracts/SwapContractFactory.sol:SwapContractFactory",
            "label": "deployed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}