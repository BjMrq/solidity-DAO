/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface EthQuoteSwapInterface extends utils.Interface {
  functions: {
    "getAskPrice(uint256)": FunctionFragment;
    "getBidPrice(uint256)": FunctionFragment;
    "getScaledRate(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairName()": FunctionFragment;
    "quoteToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swapBaseForQuoteToken(uint256)": FunctionFragment;
    "swapQuoteForBaseToken(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAskPrice"
      | "getBidPrice"
      | "getScaledRate"
      | "owner"
      | "pairName"
      | "quoteToken"
      | "renounceOwnership"
      | "swapBaseForQuoteToken"
      | "swapQuoteForBaseToken"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAskPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScaledRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapBaseForQuoteToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapQuoteForBaseToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAskPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScaledRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapBaseForQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapQuoteForBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Rate(int256,uint256)": EventFragment;
    "SwapRateInfo(string,uint256,uint256)": EventFragment;
    "SwapTransferInfo(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapRateInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapTransferInfo"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RateEventObject {
  scaledPrice: BigNumber;
  timeStamp: BigNumber;
}
export type RateEvent = TypedEvent<[BigNumber, BigNumber], RateEventObject>;

export type RateEventFilter = TypedEventFilter<RateEvent>;

export interface SwapRateInfoEventObject {
  exchangeType: string;
  sellingAmount: BigNumber;
  buyingAmount: BigNumber;
}
export type SwapRateInfoEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SwapRateInfoEventObject
>;

export type SwapRateInfoEventFilter = TypedEventFilter<SwapRateInfoEvent>;

export interface SwapTransferInfoEventObject {
  beneficiary: string;
  amountSent: BigNumber;
  amountReceived: BigNumber;
}
export type SwapTransferInfoEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SwapTransferInfoEventObject
>;

export type SwapTransferInfoEventFilter =
  TypedEventFilter<SwapTransferInfoEvent>;

export interface EthQuoteSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthQuoteSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAskPrice(
      _baseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBidPrice(
      _quoteToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getScaledRate(
      _scalingDecimal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairName(overrides?: CallOverrides): Promise<[string]>;

    quoteToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapBaseForQuoteToken(
      _baseTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapQuoteForBaseToken(
      _quoteTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAskPrice(
    _baseTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBidPrice(
    _quoteToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getScaledRate(
    _scalingDecimal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairName(overrides?: CallOverrides): Promise<string>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapBaseForQuoteToken(
    _baseTokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapQuoteForBaseToken(
    _quoteTokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAskPrice(
      _baseTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidPrice(
      _quoteToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScaledRate(
      _scalingDecimal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairName(overrides?: CallOverrides): Promise<string>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swapBaseForQuoteToken(
      _baseTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapQuoteForBaseToken(
      _quoteTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Rate(int256,uint256)"(
      scaledPrice?: BigNumberish | null,
      timeStamp?: BigNumberish | null
    ): RateEventFilter;
    Rate(
      scaledPrice?: BigNumberish | null,
      timeStamp?: BigNumberish | null
    ): RateEventFilter;

    "SwapRateInfo(string,uint256,uint256)"(
      exchangeType?: string | null,
      sellingAmount?: BigNumberish | null,
      buyingAmount?: BigNumberish | null
    ): SwapRateInfoEventFilter;
    SwapRateInfo(
      exchangeType?: string | null,
      sellingAmount?: BigNumberish | null,
      buyingAmount?: BigNumberish | null
    ): SwapRateInfoEventFilter;

    "SwapTransferInfo(address,uint256,uint256)"(
      beneficiary?: string | null,
      amountSent?: BigNumberish | null,
      amountReceived?: BigNumberish | null
    ): SwapTransferInfoEventFilter;
    SwapTransferInfo(
      beneficiary?: string | null,
      amountSent?: BigNumberish | null,
      amountReceived?: BigNumberish | null
    ): SwapTransferInfoEventFilter;
  };

  estimateGas: {
    getAskPrice(
      _baseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBidPrice(
      _quoteToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getScaledRate(
      _scalingDecimal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairName(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapBaseForQuoteToken(
      _baseTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapQuoteForBaseToken(
      _quoteTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAskPrice(
      _baseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBidPrice(
      _quoteToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getScaledRate(
      _scalingDecimal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapBaseForQuoteToken(
      _baseTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapQuoteForBaseToken(
      _quoteTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
