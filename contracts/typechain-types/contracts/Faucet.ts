/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface FaucetInterface extends utils.Interface {
  functions: {
    "lockTime(address)": FunctionFragment;
    "makeItRain()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "lockTime" | "makeItRain"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "lockTime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "makeItRain",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeItRain", data: BytesLike): Result;

  events: {
    "Request(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Request"): EventFragment;
}

export interface RequestEventObject {
  _beneficiary: string;
  _balance: BigNumber;
}
export type RequestEvent = TypedEvent<[string, BigNumber], RequestEventObject>;

export type RequestEventFilter = TypedEventFilter<RequestEvent>;

export interface Faucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FaucetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lockTime(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    makeItRain(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  makeItRain(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    makeItRain(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Request(address,uint256)"(
      _beneficiary?: null,
      _balance?: null
    ): RequestEventFilter;
    Request(_beneficiary?: null, _balance?: null): RequestEventFilter;
  };

  estimateGas: {
    lockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    makeItRain(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lockTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeItRain(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
